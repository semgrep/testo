#! /usr/bin/env bash
#
# Script that performs the steps described in the Testo tutorial
#
set -eu

workspace=my_project

# Clean up
rm -rf "$workspace"

# Create an empty dune/git project
dune init project my_project
(
  cd my_project
  rm -rf test
  git init

  # Make git ignore '_build/' (used by both dune and testo)
  echo _build >> .gitignore

  # Install testo as a git submodule
  git submodule add --depth=1 https://github.com/semgrep/testo.git

  # Create the './test' symlink
  ln -s _build/default/tests/test.exe test

  # Add all these project files to git
  git add .
  git commit -m "First commit"

  # Initialize the tests/ folder
  mkdir -p tests
  (
    cd tests
    cat > dune <<EOF
; Build the test executable for our project
(executable
 (name test)
 (modules Test)
 (libraries
    testo
 )
)
EOF
    cat > Test.ml <<EOF
(*
   The entry point for the 'test' program that runs the suite of OCaml
   tests for <this project>.
*)

let test_hello =
  Testo.create "hello"
    (fun () -> print_endline "hello!")

let tests _env = [
  test_hello;
]

let () =
  Testo.interpret_argv
    ~project_name:"my_project"
    tests
EOF
  )

  # Build the project
  dune build --root=.

  # Run the tests!
  ./test

  (
    cd tests
    # Add the rest of the tutorial to 'Test.ml'
    mv Test.ml Test.ml.v1

    cat > Test.ml.v2 <<EOF
(*
   The entry point for the 'test' program that runs the suite of OCaml
   tests for <this project>.
*)

let test_hello =
  Testo.create "hello"
    (fun () ->
      let (), res =
        Testo.with_capture stdout
          (fun () -> print_endline "hello!")
      in
      assert (res = "hello!\n")
    )

let test_dune_help =
  Testo.create "dune help"
    ~checked_output:
      (Testo.stdout
        ~expected_stdout_path:(Fpath.v "tests/dune-help.txt") ())
    (fun () -> Sys.command "dune --help" |> ignore)

let tests = [
  test_hello;
  test_dune_help;
]

let () =
  Testo.interpret_argv
    ~project_name:"my_project"
    (fun () -> tests)
EOF
    # Use this new version of Test.ml
    ln -s Test.ml.v2 Test.ml
  )

  # Build the project
  dune build --root=.

  # Run the tests, which should fail due to the missing snapshot.
  ./test || true

  # Approve the test's output, making it the reference snapshot.
  ./test approve

  # List all the tests
  ./test status -a
)
